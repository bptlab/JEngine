swagger: '2.0'
info:
  version: '1.2'
  title: Chimera API
host: localhost:8080
basePath: /Chimera/api/interface/v2
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /scenario:
    get:
      description: This method gives an overview of all current scenarios.
      operationId: getScenarios_
      produces:
      - application/json
      parameters:
      - name: filter
        in: query
        required: false
        x-is-map: false
        type: string
        description: >-
          Specifies a search. Only scenarios which
                               name contain the specified string will be
                               returned.
      responses:
        '200':
          description: List of all scenarios.
          schema:
            $ref: '#/definitions/ScenarioList'
      tags:
        - scenario
    post:
      description: This method allows to upload a new scenario.
      operationId: postInstance_
      consumes:
      - application/json
      parameters:
      - name: scenario
        in: body
        required: true
        x-is-map: false
        schema:
          $ref: '#/definitions/Scenario'
      responses:
        '201':
          description: Successfully created scenario.
          schema:
            $ref: '#/definitions/Message'
        '422':
          description: Failed to process the scenario.
          schema:
            $ref: '#/definitions/ErrorArray'
      tags:
        - scenario
  /scenario/{scenarioId}:
    get:
      description: This method provides information about one scenario.
      operationId: getScenario_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario used inside the database.
      responses:
        '200':
          description: Case model deletion was successful.
          schema:
            $ref: '#/definitions/Message'
        '404':
          description: The scenario wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
    delete:
      description: Delete a scenario with all its instances..
      operationId: deleteScenario_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario used inside the database.
      responses:
        '200':
          description: Detailed information about the scenario.
          schema:
            $ref: '#/definitions/CaseModelDetailsJaxBean'
        '404':
          description: The scenario wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario       
  /scenario/{scenarioId}/terminationcondition:
    get:
      description: This method provides information about the termination condition.
      operationId: getTerminationCondition_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the scenario. The id is the
                             primary key inside the database.
      responses:
        '200':
          description: The termination conditions for the scenario.
          schema:
            $ref: '#/definitions/TerminationCondition'
        '404':
          description: the scenario can't be found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
  /scenario/{scenarioId}/xml:
    get:
      description: This method provides information about the bpmn representation of the fragment.
      operationId: getFragmentXmlStrings_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the scenario. The id is the
                             primary key inside the database.
      responses:
        '200':
          description: The scenario's fragments as XML.
          schema:
            $ref: '#/definitions/FragmentsXML'
        '404':
          description: the scenario can't be found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
  /scenario/{scenarioId}/casestart/{requestKey}:
    post:
      description: Creates a new instance of a specified scenario by a case start event.
      operationId: Create_startNewInstanceByCaseStartTrigger_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the scenario.
      - name: requestKey
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the case start trigger.
      - name: eventJson
        in: body
        required: true
        x-is-map: false
        description: >-
          the json content for writing at the first data objects of 
          the new case.
        schema:
          $ref: '#/definitions/AttributeUpdate'
      responses:
        '201':
          description: The event was received.
          schema:
            $ref: '#/definitions/Message'
        '404':
          description: the scenario can't be found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
        - event
  /scenario/{scenarioId}/emailtask:
    get:
      description: >-
        This method provides information about all email Tasks inside
         a given scenario.
      operationId: getAllEmailTasks_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario
      - name: filter
        in: query
        required: false
        x-is-map: false
        type: string
        description: >-
          A Filter String, only mail tasks with a label containing
                               this filter String will be returned.
      responses:
        '200':
          description: List of emailtasks for the scenarios.
          schema:
            $ref: '#/definitions/EmailtaskList'
        '404':
          description: The scenario wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
        - email
  /scenario/{scenarioId}/emailtask/{emailTaskId}:
    get:
      description: This method provides information about an email Task.
      operationId: getEmailTaskConfiguration_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario model.
      - name: emailTaskId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The control node Id of the mail task.
      responses:
        '200':
          description: Detailed information about the emailtask.
          schema:
            $ref: '#/definitions/EmailConfigJaxBean'
        '404':
          description: There is no emailtask in the scenario with the given ids.
          schema:
            type: object
      tags:
        - scenario
        - email
    put:
      description: This method updates the configuration for an email Task.
      operationId: putEmailTaskConfiguration_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario model.
      - name: emailTaskId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The control node Id of the mail task.
      - name: configuration
        in: body
        required: true
        x-is-map: false
        description: The new configuration.
        schema:
          $ref: '#/definitions/EmailConfigJaxBean'
      responses:
        '200':
          description: Email task was successfully updated.
          schema:
            $ref: '#/definitions/Message'
        '400':
          description: An error occured during the update.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The case model/ email task does not exist.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
        - email
  /scenario/{scenarioId}/instance:
    get:
      description: This method provides information about all instances of one scenario.
      operationId: getScenarioInstances_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of the scenario which instances should be returned.
      - name: filter
        in: query
        required: false
        x-is-map: false
        type: string
        description: >-
          Specifies a search. Only scenarios which
                               name contain the specified string will be
                               returned.
      responses:
        '200':
          description: List of all instances for the scenario.
          schema:
            $ref: '#/definitions/ScenarioInstanceList'
        '404':
          description: The scenario wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
        - scenario instance
    put:
      description: Creates a new instance of a specified scenario. The name of the instance can be specified in the request.
      operationId: Update_startNewNamedInstance_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of the scenario.
      - name: name
        in: body
        schema: 
          type: string
        required: true
        x-is-map: false
        description: The name, which will be used for the new instance.
      responses:
        '201':
          description: Successfully created the instance.
          schema:
            $ref: '#/definitions/CaseModelOverviewJaxBean'
        '400':
          description: An error occured during instantiation.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
    post:
      description: Creates a new instance of a specified scenario. The instance will have the same name as the scenario.
      operationId: Create_startNewInstance_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of the scenario.
      responses:
        '201':
          description: Successfully created the instance.
          schema:
            $ref: '#/definitions/CaseModelOverviewJaxBean'
        '404':
          description: An error occured during instantiation.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
  /scenario/{scenarioId}/instance/{instanceId}:
    get:
      description: This method provides detailed information about a scenario instance.
      operationId: getScenarioInstance_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      responses:
        '200':
          description: Detailed information about the instance.
          schema:
            $ref: '#/definitions/CaseOverviewJaxBean'
        '404':
          description: The scenario or instance wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
  /scenario/{scenarioId}/instance/{instanceId}/events:
    get:
      description: This method provides a list of registered events for the instance.
      operationId: getEvents_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      responses:
        '200':
          description: List of registered events for the scenario instance.
          schema:
            $ref: '#/definitions/RegisteredEventsList'
        '404':
          description: The scenario or instance wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
        - event
  /scenario/{scenarioId}/instance/{instanceId}/events/{requestKey}:
    post:
      description: Receive an event for a specific request key.
      operationId: receiveEvent_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      - name: requestKey
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          This id specifies the receive event instance.
      - name: eventJson
        in: body
        required: true
        x-is-map: false
        description: >-
          the json content for updating the data object the event instance.
        schema:
          $ref: '#/definitions/AttributeUpdate'
      responses:
        '201':
          description: The event was received.
          schema:
            $ref: '#/definitions/Message'
        '404':
          description: the scenario / instance can't be found
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario
        - event
  /scenario/{scenarioId}/instance/{instanceId}/canTerminate:
    get:
      description: This determines whether a given scenario instance can terminate.
      operationId: checkTermination_
      produces:
      - text/plain
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      responses:
        '200':
          description: Instance can be deleted
          schema:
            $ref: '#/definitions/ScenarioInstanceCanTerminate'
        '404':
          description: The scenario or instance wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
  /scenario/{scenarioId}/instance/{instanceId}/terminate:
    post:
      description: This method is used to terminate a scenario instance.
      operationId: Create_terminateScenarioInstance_
      produces:
      - text/plain
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      responses:
        '200':
          description: Instance has been terminated
          schema:
            type: string
        '400':
          description: Termination condition is not fulfilled
          schema:
            type: string
        '404':
          description: The scenario or instance wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
  /scenario/{scenarioId}/instance/{instanceId}/activity:
    get:
      description: >-
        Returns a JSON-Object containing information about all activity
         instances of a specified scenario instance.
      operationId: getActivitiesOfInstance_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the instance.
      - name: filter
        in: query
        required: false
        x-is-map: false
        type: string
        description: >-
          Defines a search strings. Only activities
                               with a label containing this String will be
                               shown.
      - name: state
        in: query
        required: false
        x-is-map: false
        type: string
        description: The state of the activity instances.
      responses:
        '200':
          description: A list with all activity instances for the scenario instance.
          schema:
            $ref: '#/definitions/ActivityList'
        '400':
          description: The query state does not exist.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The scenario or instance wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
        - activity
  /scenario/{scenarioId}/instance/{instanceId}/activityinstace/{activityInstanceId}:
    get:
      description: This method is used to get the information for an specific activity.
      operationId: getActivity_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of a scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of a scenarioInstance.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of an activityInstance.
      responses:
        '200':
          description: Information about the activity instance.
          schema:
            $ref: '#/definitions/ActivityJaxBean'
        '404':
          description: The scenario / instance / activity wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
    put:
      description: >-
        This method updates the data attributes of a specific activity
         defined via its activityID.
      operationId: Update_setDataAttribute_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of a scenario model.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of an scenario instance.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The control node id of the activity which working items will be updated.
      - name: input
        in: body
        required: true
        x-is-map: false
        description: The json content for updating the data object the event instance
        schema:
          $ref: '#/definitions/AttributeUpdate'
      responses:
        '200':
          description: Successfully updated attribute.
          schema:
            $ref: '#/definitions/Message'
        '400':
          description: Couldn't update the attributes.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The scenario / instance / activity wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
  /scenario/{scenarioId}/instance/{instanceId}/activityinstace/{activityInstanceId}/begin:
    post:
      description: Updates the state of an activity instance.
      operationId: Create_beginActivity_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of a scenario model.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of an scenario instance.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of the activity instance.
      - name: postBody
        in: body
        required: true
        x-is-map: false
        description: Information about the selected dataobjects for the activity.
        schema:
          $ref: '#/definitions/postBody'
      responses:
        '202':
          description: Successfully started the activity.
          schema:
            $ref: '#/definitions/Message'
        '400':
          description: Couldn't start the activity.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The scenario / instance / activity wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
  /scenario/{scenarioId}/instance/{instanceId}/activityinstace/{activityInstanceId}/terminate:
    post:
      description: Updates the state of an activity instance.
      operationId: Create_terminateActivity_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of a scenario model.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of an scenario instance.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The id of the activity instance.
      - name: postBody
        in: body
        required: true
        x-is-map: false
        description: Information about the dataobjects for the activity.
        schema:
          $ref: '#/definitions/TerminationBody'
      responses:
        '202':
          description: Successfully terminated the activity.
          schema:
            $ref: '#/definitions/Message'
        '400':
          description: Couldn't terminate the activity.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The scenario / instance / activity wasn't found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
  /scenario/{scenarioId}/instance/{instanceId}/activityInstace/{activityInstanceId}/output:
    get:
      description: Receive the information needed for the termination of an activity instance.
      operationId: getOutputDataObjects_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          The databaseId of the scenarioInstance belonging to the
                                        aforementioned scenario.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          The databaseId of the activityInstance belonging to this
                                        scenarioInstance.
      responses:
        '200':
          description: An array with information about the outputs of the activity
          schema:
            $ref: '#/definitions/Output'
        '404':
          description: The scenario/scenarioInstance/activityInstance was not found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
        - data
  /scenario/{scenarioId}/instance/{instanceId}/activity/{activityId}/availableInput:
    get:
      description: This method provides a list of available inputs.
      operationId: getAvailableInput_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of the scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          The databaseID of the scenarioInstance belonging to the
                                        aforementioned scenario.
      - name: activityId
        in: path
        required: true
        x-is-map: false
        type: string
        description: >-
          The databaseID of the activity in this
                                        scenarioInstance.
      responses:
        '200':
          description: An array with the available dataobjects for the input.
          schema:
            $ref: '#/definitions/DataSetList'
      tags:
        - activity
        - data
  /scenario/{scenarioId}/instance/{instanceId}/activityinstance/{activityInstanceId}/workingItems:
    get:
      description: This method provides a list of the selected working items for an activity instance.
      operationId: getWorkingItems_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of a scenario.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of a scenario instance.
      - name: activityInstanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The databaseId of an activityInstance.
      responses:
        '200':
          description: A list of working items
          schema:
            $ref: '#/definitions/DataObjectList'
        '404':
          description: The scenario/scenarioInstance/activityInstance was not found.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - activity
        - data
  /scenario/{scenarioId}/instance/{instanceId}/dataobject:
    get:
      description: >-
        Returns a JSON-Object, which contains information about all
         data objects of a specified scenario instance.
      operationId: getDataObjects_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario model.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The Id of the scenario instance.
      - name: filter
        in: query
        required: false
        x-is-map: false
        type: string
        description: >-
          A String which specifies a filter. Only Data
                               Objects with a label containing this string
                               will be returned.
      responses:
        '200':
          description: List of all data objects.
          schema:
            $ref: '#/definitions/DataObjectList'
        '404':
          description: There is no scenario / instance for the given ids.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - scenario instance
        - data
  /scenario/{scenarioId}/instance/{instanceId}/dataobject/{dataObjectId}:
    get:
      description: This method provides detailed information about an data object.
      operationId: getDataObject_
      produces:
      - application/json
      parameters:
      - name: scenarioId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The scenario Id.
      - name: instanceId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The scenario instance Id.
      - name: dataObjectId
        in: path
        required: true
        x-is-map: false
        type: string
        description: The data object Id.
      responses:
        '200':
          description: Detailed information about the data object.
          schema:
            $ref: '#/definitions/DataObjectJaxBean'
        '404':
          description: There is no scenario / instance / data object for the given ids.
          schema:
            $ref: '#/definitions/Error'
      tags:
        - data
  /version:
    get:
      description: >-
        Method for checking whether an address specified in the griffin editor
         links to a valid running chimera instance
      operationId: getVersion_
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: A JSON object with the Chimera version
          schema:
            $ref: '#/definitions/VersionObject'
          examples:
            application/json:
              "version": "1.0-SNAPSHOT"
definitions:
  NamedJaxBean:
    title: NamedJaxBean
    type: object
    properties:
      name:
        description: The name which should be assigned to the entity.
        type: string
  ScenarioList:
    type: array
    description: 'IDs and Labels for all knwon scenarios'
    items:
        $ref: '#/definitions/CaseModelOverviewJaxBean'
  CaseModelOverviewJaxBean:
    type: object
    properties:
      id:
        type: string
        description: 'ID of the scenario.'
      name:
        type: string
        description: 'Name of the scenario.'
  CaseModelDetailsJaxBean:
    type: object
    properties:
      id:
        type: string
        description: 'ID of the scenario.'
      name:
        type: string
        description: 'Name of the scenario.'
      modelversion:
        type: number
        format: integer
        description: 'Version number of the scenario.'
  TerminationCondition:
    type: array
    description: 'Array of condition sets with array of atomic conditions.'
    items:
        $ref: '#/definitions/ConditionSet'
  ConditionSet:
    type: array
    description: 'Array of atomic conditions.'
    items:
        $ref: '#/definitions/AtomicDataStateCondition'
  AtomicDataStateCondition:
    type: object
    description: 'Name of connected data class and object lifecycle state.'
    properties:
      dataclass:
        type: string
        description: 'Name of data class.'
      state:
        type: string
        description: 'Name of object lifecycle state.'
  FragmentsXML:
    type: object
    properties:
      xml:
        type: array
        description: 'List of all fragments as XML'
        items:
          type: string
  EmailtaskList:
    type: array
    description: 'Information of all known emailtasks.'
    items:
      $ref: '#/definitions/EmailJaxBean'
  EmailJaxBean:
    type: object
    properties:
      id:
        type: string
        description: 'The id of the email task.'
      label:
        type: string
        description: 'Name of the email task.'
  EmailConfigJaxBean:
    type: object
    properties:
      receiver:
        type: string
        description: 'The receiver of the email.'
      subject:
        type: string
        description: 'The subject of the email.'
      message:
        type: string
        description: 'The message of the email.'
  ScenarioInstanceList:
    type: array
    description: 'Overview for all instances of a scenario.'
    items:
      $ref: '#/definitions/CaseOverviewJaxBean'
  CaseOverviewJaxBean:
    type: object
    description: 'Overview for an specific instance.'
    properties:
      id:
        type: string
        description: 'Id of the instance.'
      name:
        type: string
        description: 'Name of the instance.'
      terminated:
        type: boolean
        description: 'Is true if the instance is terminated.'
  ScenarioInstanceCanTerminate:
    type: object
    properties:
      canTerminate:
        type: boolean
        description: 'True if the instance can terminate.'
  Scenario:
    type: object
    properties:
      name:
        type: string
        description: 'The scenarios name'
      _id:
        type: string
        description: 'Unique identifier of any scenario.'
      terminationconditions:
        type: array
        items:
          $ref: '#/definitions/TerminationCondition'
        description: 'The termination conditions that are used.'  
      domain_model:
        type: string
        description: 'The Id of the associated domain model.'
      fragments:
        type: array
        items:
          type: string
        description: 'The Ids of associated fragments.'
      revision:
        type: number
        format: integer
        description: |
          The scenarios revision. Is increased automatically if the
          fragments, the data_objects or the termination condition is different 
          from the last version
  DataObjectList:
    type: array
    description: 'Information about all data objects.'
    items:
      $ref: '#/definitions/DataObjectJaxBeanNew'
  DataObjectJaxBeanNew:
    type: object
    properties:
      id:
        type: string
        description: 'The Id of the data object.'
      dataclass:
        type: string
        description: 'Name of data class of data object.'
      state:
        type: string
        description: 'Name of object lifecycle state of data object.'
      locked:
        type: boolean
        description: 'True if the DataObject is currently in use by an activity instance.'
      attributeConfiguration:
        type: array
        items:
          $ref: '#/definitions/DataAttributeJaxBean'
  DataAttributeJaxBean:
    type: object
    properties:
      id:
        type: string
        description: 'Id of the data attribute instance.'
      name:
        type: string
        description: 'Name of the associated data attribute.'
      type:
        type: string
        description: 'Type of the associated data attribute.'
      value:
        type: object
        description: 'Current value of the data attribute instance.'
  Output:
    type: object
    description: 'Information about the dataobjects for the output (possible states and attribute details).'   
    properties:
      (DataClassName):
        type: object
        properties:
          state:
            type: string
            description: 'The current object lifecycle state of data object. Is <TO BE CREATED> if the data object will be newly created after termination.'
          states:
            type: array
            description: 'All possible state transitions.'
            items:
              type: string
          attributeConfiguration:
            type: array
            items:
              $ref: '#/definitions/DataAttributeJaxBean'
  TerminationBody:
    type: object
    description: 'The json body used for termination.'
    properties:
      transitions:
        $ref: '#/definitions/ObjectLifecycleTransitions'
      values:
        $ref: '#/definitions/AttributeUpdate'
  ObjectLifecycleTransitions:
    type: object
    description: 'The transitions for the existing data objects.'
    properties:
      (DataClassName):
        type: object
        description: 'Name of the data class of the data object which object lifecycle state will be updated.'
        properties:
          (NewObjectLifecycleState):
            type: string
            description: 'Name of the new object lifecycle state.'
  AttributeUpdate:
    type: object
    description: ''
    properties:
      (DataClassName):
        type: object
        description: 'Name of data class of data object which data attribute instance will be updated.'
        properties:
          (DataAttributeName):
            type: object
            description: 'Name of data attribute instance which will be updated.'
            properties:
              (NewDataAttributeValue):
                type: string
                description: 'The new value for the data attribute instance.'
  RegisteredEventsList:
    type: array
    description: 'List of events.'
    items:
      $ref: '#/definitions/ReceiveEventJaxBean'
  ReceiveEventJaxBean:
    type: object
    description: 'Information about a receive event.'
    properties:
      name:
        type: string
        description: 'Name of the respective event for the event instance.'
      requestKey:
        type: string
        description: 'Key for receiving an event for the event instance.'
      query:
        type: string
        description: 'Query used by Unicorn.'
  DataSetList:
    type: array
    description: 'All data objects found.'
    items:
      $ref: '#/definitions/DataObjectJaxBean'
  Message:
    type: object
    properties:
      message:
        type: string
        description: Content of the message.
  DataObjectJaxBean:
    type: object
    properties:
      label:
        type: string
        description: 'The label of the data object.'
      id:
        type: number
        format: integer
        description: 'The id the dataobject (not the instance) has inside the database.'
      state:
        type: string
        description: 'The state of the data object.'
  ActivityList:
    type: array
    description: 'Details all activites'
    items:
      $ref: '#/definitions/ActivityJaxBean'
  ActivityJaxBean:
    type: object
    description: 'Details for an activity'
    properties:
      id:
        type: string
        description: 'The Id of the activity instance.'
      label:
        type: string
        description: 'Name of the activity.'
      state:
        type: string
        description: 'State of the activity Instance.'
  postBody:
    type: object
    description: 'Information about data objects.'
    properties:
      dataobjects:
        type: array
        description: ids of the data objects
        items:
          type: number
          format: integer
  Error:
    type: object
    properties:
      error:
        type: string
        description: 'Description of the error.'
  ErrorArray:
    type: array
    description: 'List of errors'
    items:
      $ref: '#/definitions/ErrorObject'
  ErrorObject:
    type: object
    properties:
      text:
        type: string
        description: 'Description of the error.'
      type:
        type: string
        description: 'Level of the error'
  VersionObject:
    type: object
    properties:
      version:
        description: The current Chimera version.
        type: string